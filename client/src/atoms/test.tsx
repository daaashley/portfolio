import React, { useState } from 'react'; import { Input, List, ListItem, Spinner } from 'native-base'; interface AutocompleteProps { apiUrl: string; } const AutocompleteInput: React.FC<AutocompleteProps> = ({ apiUrl }) => { const [searchTerm, setSearchTerm] = useState(''); const [isLoading, setIsLoading] = useState(false); const [items, setItems] = useState<string[]>([]); const handleInputChange = async (text: string) => { setSearchTerm(text); if (text.length >= 4) { try { setIsLoading(true); const response = await fetch(`${apiUrl}?search=${text}`); const data = await response.json(); setItems(data.items); setIsLoading(false); } catch (error) { console.error('Error fetching autocomplete data:', error); setIsLoading(false); } } else { setItems([]); } }; return (<>       <Input placeholder="Search" value={searchTerm} onChangeText={handleInputChange} />       {isLoading ? (<Spinner color="blue" />) : (<List>           {items.map((item, index) => (<ListItem key={index}>               <span>{item}</span>             </ListItem>))}         </List>)}     </>); }; export default AutocompleteInput;
