image:
  name: hashicorp/terraform:1.4.4
  entrypoint:
  - '/usr/bin/env'
  - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PYTEST_DB_URL: "postgresql://postgres:postgres@postgres:5432/postgres"

stages:
- pytest
- black
- Test and Lint
- Build and Push
- Staging Plan
- Staging Apply
- Production Plan
- Production Apply
- Destroy

# Test template
.test-template:
  stage: pytest
  image: python:3.9.6-slim-buster
  except:
  - tags
  before_script:
  - apt-get update
  - apt-get -y install libpq-dev python3-dev curl build-essential procps unzip libffi-dev gcc postgresql postgresql-client
  - pip install poetry==1.2.2
  - poetry config virtualenvs.create false
  - poetry install

black:
  extends:
  - .test-template
  script:
  - black --check .


pytest:
  extends:
  - .test-template
  services:
  - name: postgres:13.8-bullseye
    alias: database
  variables:
    # Postgresql variables
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_USER: postgres
    POSTGRES_DB: postgres
    POSTGRES_PORT: '5432'
  script:
  - set -x
  - apt-get --allow-releaseinfo-change update
  - apt-get install --no-install-recommends -y build-essential libpq-dev libffi-dev gcc
  - pip install --upgrade pip
  - poetry config virtualenvs.in-project true
  - poetry install
  - export DATABASE_URL=$PYTEST_DB_URL
  # - apt install -y wait-for-it
  # - psql "postgresql://postgres:postgres@postgres:5432/postgres"
  #- wait-for-it -t 180 $BACKEND_DB_HOST:5432
  - poetry run pytest --cov-report term-missing --cov=backend --junitxml=report.xml
  - coverage xml
  artifacts:
    when: always
    reports:
      junit: report.xml

Validate Terraform:
  stage: Test and Lint
  script:
  - cd deploy/terraform
  - terraform init -backend=false
  - terraform validate
  - terraform fmt -check
  rules:
  - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'


Build and Push:
  image: docker:latest
  services:
  - docker:dind
  stage: Build and Push
  script:
  - apk add py3-pip
  - pip3 install awscli
  - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA .
  - $(aws ecr get-login --no-include-email --region us-east-1)
  - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA
  - docker tag $ECR_REPO:$CI_COMMIT_SHORT_SHA $ECR_REPO:latest
  - docker push $ECR_REPO:latest
  rules:
  - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Plan:
  stage: Staging Plan
  script:
  - cd deploy/terraform/
  - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
  - terraform init
  - terraform workspace select staging || terraform workspace new staging
  - terraform plan
  rules:
  - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Apply:
  stage: Staging Apply
  script:
  - cd deploy/terraform/
  - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
  - terraform init
  - terraform workspace select staging
  - terraform apply -auto-approve
  rules:
  - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Production Plan:
  stage: Production Plan
  script:
  - cd deploy/terraform/
  - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
  - terraform init
  - terraform workspace select production || terraform workspace new production
  - terraform plan
  rules:
  - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
  - cd deploy/terraform/
  - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
  - terraform init
  - terraform workspace select production
  - terraform apply -auto-approve
  rules:
  - if: '$CI_COMMIT_BRANCH == "production"'

Staging Destroy:
  stage: Destroy
  script:
  - cd deploy/
  - terraform init
  - terraform workspace select staging
  - terraform destroy -auto-approve
  rules:
  - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
    when: manual

Production Destroy:
  stage: Destroy
  script:
  - cd deploy/
  - terraform init
  - terraform workspace select production
  - terraform destroy -auto-approve
  rules:
  - if: '$CI_COMMIT_BRANCH == "production"'
    when: manual
